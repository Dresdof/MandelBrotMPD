resource run()
	
	import Mandelbrot;
    import MPDWin;
	
	optype Proc = ();
	const int NUM_VERSIONS = 5;
	string[NUM_VERSIONS + 1] activated;

	type VersionName = string[11];
	VersionName versionNames[5];
	versionNames[1] = "séquentiel";
	versionNames[2] = "PIF";
	versionNames[3] = "PIGA";
	versionNames[4] = "PIGC";
	versionNames[5] = "PST";

	if (numargs() < 1) { activated= "111111"; }
	else { getarg(1, activated); }

	const int width = 400;
	const int height = 300;
	const int pixelsNumber = width * height;

	const Complex center = complex(-.7, 0);
	const Complex span = complex(2.7, -(4.0 / 3.0) * 2.7 * height / width);
	const Complex beginning = complex(center^.realPart - span^.realPart / 2, center^.imaginaryPart - span^.imaginaryPart / 2);
	const Complex ending = complex(center^.realPart + span^.realPart / 2, center^.imaginaryPart + span^.imaginaryPart / 2);
	
	ComplexArray complexes;
	IntegerArray iterations;

	complexes = assignateComplexArray(width, height, beginning, span);
	int beginAge, endAge = 0;

	procedure sequential()
	{ iterations = mandelbrotSequential(complexes); }

	procedure pif()
	{ iterations = mandelbrotPIF(complexes); }

	procedure piga()
	{ iterations = mandelbrotPIGA(complexes); }

	procedure pigc()
	{ iterations = mandelbrotPIGC(complexes); }

	procedure pst()
	{ iterations = mandelbrotPST(complexes); }

	cap Proc versions[NUM_VERSIONS] = (sequential, pif, piga, pigc, pst);
	
	procedure runVersion (string[*] procedureName, cap Proc p)
	{
		beginAge = age();
		p();
		endAge = age();
		printf("Temps d'exécution %s : %i\n", procedureName, endAge - beginAge);
	}

	for [i = 1 to NUM_VERSIONS]
	{
		if(activated[i] == '1')
		{
			runVersion(versionNames[i], versions[i]);
		}
	}

	if (activated[6] == '1')
	{
		winWindow screen = WinOpen( "", "Fenetre de rendu.", null, UseDefault, width, height);

		WinSetForeground( screen, "black" );
		WinSetBackground( screen, "white" );

		WinEraseArea(screen, winRectangle(0, 0, width, height));	
		draw(iterations, screen, width);
	}

end
