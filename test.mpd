resource test()
	
	import Mandelbrot;

	# Vérification que deux real sont égaux.
	procedure assertRealEquals (val real attendu, val real obtenu) returns bool b
	{
		b = false;
		
		real precision = 0.000001;
		
		if ((attendu - obtenu) >= precision or -(attendu - obtenu) >= precision) 
		{ 			
			printf("Valeur attendue : %2f, valeur obtenue : %f. Erreur : les valeurs sont différentes\n", attendu, obtenu); 
			return;
		}
		
		printf("Valeur attendue : %2f, valeur obtenue : %f. Test réussi.\n", attendu, obtenu);
		b = true;
	}

	# Vérification que deux tableaux d'entiers sont égaux.
	procedure assertIntArrayEquals (IntegerArray ia1, IntegerArray ia2, string[*] versionName) returns bool b
	{
		b = false;

		if(ub(ia1^) != ub(ia2^)) 
		{ 
			printf("%s - Erreur : les tableaux de sont pas de même longueur.\n", versionName);
			return; 
		}

		for [i = 1 to ub(ia1^)]
		{
			if(ia1^[i] != ia2^[i]) 
			{
				printf("%s - Erreur : valeurs différentes.\n", versionName);
				return; 
			}
		} 
		printf("%s - Succès.\n", versionName);
		b = true;	
	}
	
	const int NUM_TESTS = 9;
	
	const int width = 400;
	const int height = 300;
	const int pixelsNumber = width * height;

	const Complex center = complex(-.7, 0);
	const Complex span = complex(2.7, -(4.0 / 3.0) * 2.7 * height / width);
	const Complex beginning = complex(center^.realPart - span^.realPart / 2, center^.imaginaryPart - span^.imaginaryPart / 2);
	const Complex ending = complex(center^.realPart + span^.realPart / 2, center^.imaginaryPart + span^.imaginaryPart / 2);
	
	ComplexArray complexes;
	IntegerArray sequentialIterations, iterations;

	[NUM_TESTS]bool resultat;

	write("Test de la fonction de calcul de la valeur absolue. ");

	resultat[1] = assertRealEquals(5, absolute(complex(3,4)));
	resultat[2] = assertRealEquals(7.211103, absolute(complex(6,4)));
	resultat[3] = assertRealEquals(11.401754, absolute(complex(7,9)));
	resultat[4] = assertRealEquals(2.236068, absolute(complex(1,2)));
	resultat[5] = assertRealEquals(3.162278, absolute(complex(3,1)));
	
	write();
	write("Test des versions parallèles.");

	write("Assignation du plan.");
	complexes = assignateComplexArray(width, height, beginning, span);
	
	write("Calcul des valeurs séquentielles");
	sequentialIterations = mandelbrotSequential(complexes);

	write("Calcul des valeurs PIF puis comparaison.");
	resultat[6] = assertIntArrayEquals(sequentialIterations, mandelbrotPIF(complexes), "PIF");

	write("Calcul des valeurs PIGA puis comparaison.");
	resultat[7] = assertIntArrayEquals(sequentialIterations, mandelbrotPIGA(complexes), "PIGA");
	
	write("Calcul des valeurs PIGC puis comparaison.");
	resultat[8] = assertIntArrayEquals(sequentialIterations, mandelbrotPIGC(complexes), "PIGC");

	write("Calcul des valeurs PST puis comparaison.");
	resultat[9] = assertIntArrayEquals(sequentialIterations, mandelbrotPST(complexes), "PST");
	
	bool allOk = true;
	
	for [i = 1 to NUM_TESTS ]
	{ if (resultat[i] == false) { allOk = false; } }
	
	if(allOk) { write("Tous les tests sont remplis avec succès."); }
	else { write("Erreur : un ou plusieurs tests ont échoué."); }
	
end