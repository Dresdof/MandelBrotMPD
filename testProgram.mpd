resource testProgram()
	
	import Mandelbrot;
	
#   import MPDWin
	
	const int width = 78;
	const int height = 44;
	const int pixelsNumber = width * height;
	const int maxIter = 10000;
	
	const Complex center = complex(-.7, 0);
	const Complex span = complex(2.7, -(4.0 / 3.0) * 2.7 * height / width);
	const Complex beginning = complex(center^.realPart - span^.realPart / 2, center^.imaginaryPart - span^.imaginaryPart / 2);
	const Complex ending = complex(center^.realPart + span^.realPart / 2, center^.imaginaryPart + span^.imaginaryPart / 2);

	Complex complexes[pixelsNumber];
	int iterations[pixelsNumber];

	for [i = 1 to pixelsNumber] 
	{
		int x = i % width;
		int y = i / width;

		complexes[i] = complex(beginning^.realPart + x * span^.realPart / (width + 1), 
			beginning^.imaginaryPart + y * span^.imaginaryPart / (height + 1));
	}
	
	co [i = 1 to pixelsNumber]
		iterations[i] = mandelbrotIterate(complexes[i], maxIter);
	oc
	
	for [i = 1 to pixelsNumber ]
	{
		int n = iterations[i];
		int x = i % width;
		
		if (n == maxIter) { n = 0; }
		if (n > 0) {
			#char charset[] = ".,c8M@jawrpogOQEPGJ";
			writes('a');
		} else { writes(' ');} 
		
		if(x + 1 == width) { write(); }
	}
		

end